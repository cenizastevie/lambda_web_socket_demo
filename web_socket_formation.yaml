Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Description: >
  FastAPI on Lambda with API Gateway WebSocket + Lambda + DynamoDB connection manager

Resources:

  # DynamoDB Table for storing WebSocket connections
  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: WebSocketConnections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # IAM Role for Lambda with access to DynamoDB and API Gateway Management API
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: WebSocketLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: WebSocketDynamoAndApiGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                Resource: !GetAtt WebSocketConnectionsTable.Arn
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  # Lambda Functions for $connect, $disconnect, sendmessage

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: connect_handler/
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Timeout: 10

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: disconnect_handler/
      Environment:
        Variables:
          TABLE_NAME: !Ref WebSocketConnectionsTable
      Timeout: 10

  WebSocketSendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: send_message_handler/
      Environment:
        Variables:
          APIGW_DOMAIN: !Sub "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com"
          APIGW_STAGE: prod
      Timeout: 10

  # API Gateway WebSocket API
  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  # API Gateway Routes
  WebSocketConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketConnectIntegration}

  WebSocketDisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketDisconnectIntegration}

  WebSocketSendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      Target: !Sub integrations/${WebSocketSendMessageIntegration}

  # API Gateway Integrations
  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketConnectFunction.Arn}

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketDisconnectFunction.Arn}

  WebSocketSendMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:aws:apigateway:${Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
        - {Region: !Ref "AWS::Region", LambdaArn: !GetAtt WebSocketSendMessageFunction.Arn}

  # API Deployment and Stage
  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - WebSocketConnectRoute
      - WebSocketDisconnectRoute
      - WebSocketSendMessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      StageName: prod
      AutoDeploy: true

  # Permission for API Gateway to invoke Lambda
  LambdaInvokePermissionConnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect

  LambdaInvokePermissionDisconnect:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect

  LambdaInvokePermissionSendMessage:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketSendMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/sendmessage

  # CloudWatch Log Group for Lambda
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /lambda/websocket-lambdas
      RetentionInDays: 7

Outputs:
  WebSocketApiId:
    Description: WebSocket API ID
    Value: !Ref WebSocketApi

  WebSocketApiEndpoint:
    Description: WebSocket API Endpoint URL
    Value: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${WebSocketStage}"
    Export:
      Name: WebSocketApiEndpoint

  WebSocketApiArn:
    Description: WebSocket API ARN
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}"

  WebSocketConnectionsTableExport:
    Description: WebSocket DynamoDB Table Name
    Value: !Ref WebSocketConnectionsTable
    Export:
      Name: WebSocketConnectionsTable


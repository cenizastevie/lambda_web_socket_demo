AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  S3 buckets for input/output/static web, Lambda for presigned URL, Lambda (Docker) for processing, API Gateway endpoints, public access as required.

Resources:

  InputFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "input-files-bucket-${AWS::StackName}"

  OutputFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "output-files-bucket-${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  OutputFilesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OutputFilesBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${OutputFilesBucket.Arn}/*"

  StaticWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "static-web-bucket-${AWS::StackName}"
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  StaticWebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${StaticWebBucket.Arn}/*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "S3LambdaExecutionRole-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt InputFilesBucket.Arn
                  - !Sub "${InputFilesBucket.Arn}/*"
                  - !GetAtt OutputFilesBucket.Arn
                  - !Sub "${OutputFilesBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/docker-process-handler-repo

  PresignUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import os
        import json
        import boto3
        def lambda_handler(event, context):
            s3 = boto3.client('s3')
            bucket = os.environ['BUCKET_NAME']
            try:
                body = event.get('body')
                if isinstance(body, str):
                    body = json.loads(body)
                filename = body['filename']
            except Exception as e:
                return {'statusCode': 400, 'body': json.dumps({'error': 'Missing filename'})}
            presigned_url = s3.generate_presigned_url(
                'put_object',
                Params={'Bucket': bucket, 'Key': filename},
                ExpiresIn=3600
            )
            return {
                'statusCode': 200,
                'body': json.dumps({'presigned_url': presigned_url, 'key': filename})
            }
      Handler: index.lambda_handler
      Runtime: python3.13
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BUCKET_NAME: !Ref InputFilesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /get-presigned-url
            Method: post
      Timeout: 10

  DockerProcessRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-process-handler-repo

  DockerProcessFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - DockerProcessRepository
    Properties:
      PackageType: Image
      ImageUri: !Sub "${DockerProcessRepository.RepositoryUri}:latest"
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          INPUT_BUCKET: !Ref InputFilesBucket
          OUTPUT_BUCKET: !Ref OutputFilesBucket
          APIGW_MANAGEMENT_API: !ImportValue WebSocketApiEndpoint
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /process
            Method: post
      Timeout: 60

Outputs:
  InputFilesBucket:
    Description: Input S3 Bucket
    Value: !Ref InputFilesBucket
  OutputFilesBucket:
    Description: Output S3 Bucket (public)
    Value: !Ref OutputFilesBucket
  StaticWebBucket:
    Description: Static Web S3 Bucket (public)
    Value: !Ref StaticWebBucket
  PresignUrlFunction:
    Description: Lambda for presigned URL
    Value: !Ref PresignUrlFunction
  DockerProcessFunction:
    Description: Lambda (Docker) for processing
    Value: !Ref DockerProcessFunction

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'S3 buckets for input/output/static web, Lambda for presigned URL, Lambda
  (Docker) for processing, API Gateway endpoints, public access as required.

  '
Resources:
  InputFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: input-files-bucket-!Ref AWS::StackName
  OutputFilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: output-files-bucket-!Ref AWS::StackName
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  StaticWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: static-web-bucket-!Ref AWS::StackName
      WebsiteConfiguration:
        IndexDocument: index.html
      AccessControl: PublicRead
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3LambdaExecutionRole-!Ref AWS::StackName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: S3AccessPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            Resource:
            - Fn::GetAtt:
              - InputFilesBucket
              - Arn
            - Fn::Sub: ${InputFilesBucket.Arn}/*
            - Fn::GetAtt:
              - OutputFilesBucket
              - Arn
            - Fn::Sub: ${OutputFilesBucket.Arn}/*
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - execute-api:ManageConnections
            Resource:
              Fn::Sub: arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/@connections/*
  PresignUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: "import os\nimport json\nimport boto3\ndef lambda_handler(event,\
        \ context):\n    s3 = boto3.client('s3')\n    bucket = os.environ['BUCKET_NAME']\n\
        \    try:\n        body = event.get('body')\n        if isinstance(body, str):\n\
        \            body = json.loads(body)\n        filename = body['filename']\n\
        \    except Exception as e:\n        return {'statusCode': 400, 'body': json.dumps({'error':\
        \ 'Missing filename'})}\n    presigned_url = s3.generate_presigned_url(\n\
        \        'put_object',\n        Params={'Bucket': bucket, 'Key': filename},\n\
        \        ExpiresIn=3600\n    )\n    return {\n        'statusCode': 200,\n\
        \        'body': json.dumps({'presigned_url': presigned_url, 'key': filename})\n\
        \    }\n"
      Handler: index.lambda_handler
      Runtime: python3.13
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: InputFilesBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /get-presigned-url
            Method: post
      Timeout: 10
  DockerProcessRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: docker-process-handler-repo
  DockerProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri:
        Fn::Sub: ${DockerProcessRepository.RepositoryUri}:latest
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Environment:
        Variables:
          INPUT_BUCKET:
            Ref: InputFilesBucket
          OUTPUT_BUCKET:
            Ref: OutputFilesBucket
          APIGW_MANAGEMENT_API:
            Fn::ImportValue: WebSocketApiEndpoint
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /process
            Method: post
      Timeout: 60
Outputs:
  InputFilesBucket:
    Description: Input S3 Bucket
    Value:
      Ref: InputFilesBucket
  OutputFilesBucket:
    Description: Output S3 Bucket (public)
    Value:
      Ref: OutputFilesBucket
  StaticWebBucket:
    Description: Static Web S3 Bucket (public)
    Value:
      Ref: StaticWebBucket
  PresignUrlFunction:
    Description: Lambda for presigned URL
    Value:
      Ref: PresignUrlFunction
  DockerProcessFunction:
    Description: Lambda (Docker) for processing
    Value:
      Ref: DockerProcessFunction
